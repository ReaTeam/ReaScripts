// @noindex
// @author Ben 'Talagan' Babut
// @license MIT
// @description This file is part of Spectracular

// Modifies _SAMPLES by applying a window

WINDOW_HANN = 0;
WINDOW_RECT = 1;

// A start offset and a size should be given :
// This is useful if the samples are zero-padded and the real start is not 0 and the real window size is not the size of _SAMPLES

MEM_PTR    = 0;
function malloc(size)
    local(ptr)
(
    ptr = MEM_PTR;
    MEM_PTR = MEM_PTR + size;
    ptr;
);

// Memory map
HANN_COEFFS   = malloc(_WINDOW_SIZE); // Precalculated hann coeffs, reusable from one round to the other for better performance
_SAMPLES      = malloc(_SIZE);        // Passed by the lua script.


// Input :
// -------
// _WINDOW_TYPE
// _WINDOW_START
// _WINDOW_SIZE
// _SAMPLES

// Output :
// --------
// _ENERGY
// _MAX_ENERGY


// Recalculate hann coeffs for our window.
// We'll try to reuse them as much as possible accross calls to this EEL function
// To avoid costy calculations
function recalculate_hann_coeffs_if_needed()
    local(i, s, mult)
(
    // For debugging
    RECALCULATED_COEFFS = 0;

    // Since we reuse the same function over and over again
    // Try to avoid recalculating costy coefficients along the spectrgograph
    // 99% of the time they will not change (except on the borders of the spectro)
    (LAST_HANN_SIZE != _WINDOW_SIZE)?(

        i       = 0;
        mult    = $pi/(_WINDOW_SIZE - 1);

        while(i < _WINDOW_SIZE) (
            s                 = sin(i * mult);
            HANN_COEFFS[i]    = s * s;
            i = i+1;
        );

        LAST_HANN_SIZE      = _WINDOW_SIZE;
        RECALCULATED_COEFFS = 1;
    );
);

function hann_window(samples)
    local(i, coeff, idx, new_sample)
(
    recalculate_hann_coeffs_if_needed();

    max_egy = 0;
    sig_egy = 0;

    i = 0;
    while(i < _WINDOW_SIZE) (
        idx          = _WINDOW_START + i;

        coeff        = HANN_COEFFS[i]; // sinÂ²
        new_sample   = coeff * samples[idx];

        // Since we apply windowing, the max energy of a signal on this window
        // is affected. Perform a calculation to know how it is affected (should be squared to get the magnitude)
        // Use samples with amplitude 1 as reference.
        max_egy         = max_egy + coeff;
        sig_egy         = sig_egy + (new_sample * new_sample);

        samples[idx]    = new_sample;

        i = i + 1;
    );

    _ENERGY     = sig_egy;
    _MAX_ENERGY = max_egy;
);

function rect_window(samples)
    local(i, s)
(
    sig_egy = 0;
    max_egy = 0;

    i = 0;
    while(i < _WINDOW_SIZE) (
        idx     = _WINDOW_START + i;
        s       = samples[idx];

        sig_egy = sig_egy + (s * s);
        max_egy = max_egy + (1 * 1);

        i = i + 1;
    );

    _ENERGY     = sig_egy;
    _MAX_ENERGY = max_egy;
);

(_WINDOW_TYPE == WINDOW_HANN)?(hann_window(_SAMPLES));
(_WINDOW_TYPE == WINDOW_RECT)?(rect_window(_SAMPLES));
