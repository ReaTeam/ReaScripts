--[[
    Description: Generate script from custom action
    Version: 1.1.1
    Author: Lokasenna
    Donation: https://paypal.me/Lokasenna
    Changelog:
        Update by X-Raym
        New output directory
        Reapack compatible header
        Author field
        Copy path to clipboard
        Error prevention
    Links:
        Forum Thread https://forum.cockos.com/showthread.php?p=2184417
        Lokasenna's Website http://forum.cockos.com/member.php?u=10417
    About:
        As the name suggests, this script prompts the user for a custom action
        and spits out an equivalent Lua script.

        Note: This tool has "dumb" and can't optimize the resulting script's
        perfomance - in some cases writing a script by hand will likely be much
        faster.
    Donation: https://www.paypal.me/Lokasenna
]]--

-- Script generated by Lokasenna's GUI Builder

os_sep = package.config:sub(1,1)

folders = {reaper.GetResourcePath(), "Scripts", "Custom Actions"}
folder = table.concat( folders, os_sep ) .. os_sep

local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please run 'Set Lokasenna_GUI v2 library path.lua' in the Lokasenna_GUI folder.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()

GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Textbox.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end




local function load_action_str(id)
  if not id then return false, "No ID passed." end
  local path = reaper.GetResourcePath() .. "/reaper-kb.ini"
  local f, err = io.open(path, "r")
  if err then
    return nil, err
  end

  local str
  for line in f:lines() do
    if line:match('"'..id..'"') then
      str = line
      break
    end
  end

  f:close()

  if str then
    return str
  else
    return nil, "Couldn't find ID in reaper-kb.ini.\n\nID: " .. id
  end
end

local function parse_action_str(action_str)
-- ACT 1 0 "05de181ebb7dd94bb7bcb4b5ae1f2592" "Custom: Add stretch marker ONLY to item at mouse position" _SWS_SAVEALLSELITEMS1 40528 41848 _SWS_RESTALLSELITEMS1
  if not action_str then return false end
  local name, command_str = action_str:match('"Custom: (.+)" (.+)$')
  local commands = {}
  for command in command_str:gmatch("[^%s]+") do
    commands[#commands+1] = command
  end

  return name, commands
end

local function parse_options(chk_vals)
  return {
    preventUIRefresh = chk_vals[1],
    undoBlock = chk_vals[2],
  }
end

local function generate_script(name, commands, options)
  if not name then return false end
  local header = {
    "--[[",
    " * ReaScript Name: " .. name,
    " * Author: " .. GUI.Val("author"),
    " * Version: 1.0",
    "]]--",
    "",
    "local function main()"
  }

  local footer = {
    "end",
    "",
    "main()",
  }

  local script = {}
  if options.preventUIRefresh then
    script[#script+1] = "  reaper.PreventUIRefresh(1)"
  end
  if options.undoBlock then
    script[#script+1] = "  reaper.Undo_BeginBlock()\n"
  end

  for _, command in ipairs(commands) do
    local id = command
    if id:match("^_") then
      id = reaper.NamedCommandLookup(id)
    end

    script[#script+1] = "  reaper.Main_OnCommand(" .. id .. ", 0)"
  end

  if options.undoBlock then
    script[#script+1] = "\n  reaper.Undo_EndBlock('"..name.."', 0)"
  end
  if options.preventUIRefresh then
    script[#script+1] = "  reaper.PreventUIRefresh(-1)"
    script[#script+1] = "  reaper.UpdateArrange()"
    script[#script+1] = "  reaper.UpdateTimeline()"
  end

  return table.concat(header, "\n") .. "\n" ..
    table.concat(script, "\n") .. "\n" ..
    table.concat(footer, "\n")
end

local function write_file(name, script_contents, folder)
  reaper.RecursiveCreateDirectory(folder,0)
  local author = GUI.Val("author")
  local prefix = (author and author ~= "" and author .. "_") or ""
  local path = folder .. prefix .. name .. ".lua"
  local f, err = io.open(path, "w")
  if err then
    return nil, err
  end

  f:write(script_contents)
  f:close()

  return path
end

local function go()
  local id = GUI.Val("txt_action"):match('"?_?(.+)"?')
  if id == "" then
    reaper.ShowMessageBox("Please enter an action ID", "Whoops!", 0)
    return
  end

  local action_str, err = load_action_str(id)
  if not action_str or err then
    reaper.ShowMessageBox(err, "Whoops!", 0)
    return
  end

  local name, commands = parse_action_str(action_str)

  local options = parse_options(GUI.Val("chk_options"))
  local script_contents = generate_script(name, commands, options)

  local path, err = write_file(name, script_contents, folder)
  if err then
    reaper.ShowMessageBox(err, "Whoops!", 0)
    return
  end
  reaper.CF_SetClipboard(path)
  reaper.ShowMessageBox("Successfully wrote to file:\n"..path, "Yay!", 0)
end


GUI.name = "Generate script from custom action"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 416, 250
GUI.anchor, GUI.corner = "mouse", "C"


y = 32
GUI.New("txt_action", "Textbox", {
    z = 11,
    x = 32,
    y = y,
    w = 348,
    h = 22,
    caption = "Action ID:",
    cap_pos = "top",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

y = y + 50

GUI.New("author", "Textbox", {
    z = 11,
    x = 32,
    y = y,
    w = 348,
    h = 22,
    caption = "Author (optional):",
    cap_pos = "top",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})

y = y + 42

GUI.New("chk_options", "Checklist", {
    z = 11,
    x = 32,
    y = y,
    w = 348,
    h = 64,
    caption = "",
    optarray = {
      "Prevent UI updates while running (can be much faster)",
      "Add Undo block",
    },
    dir = "v",
    pad = 4,
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = true,
    shadow = true,
    swap = nil,
    opt_size = 20
})

y = y + 86

GUI.New("btn_go", "Button", {
    z = 11,
    x = 160,
    y = y,
    w = 96,
    h = 24,
    caption = "Go!",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = go,
})

GUI.Val("chk_options", {true, true, true})

GUI.Init()
GUI.Main()
