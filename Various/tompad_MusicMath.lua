-- @description musicmath - bpm to ms converter
-- @author tompad
-- @version 1.0
-- @changelog Published on BitBucket, Reaper forum and.....Reapack?
-- @screenshot Screenshot of tompad_MusicMath https://bitbucket.org/TompaD/tompad_musicmath/downloads/tompad_MusicMath.png
-- @donation Donate via PayPal https://paypal.me/tompad
-- @about
--   tompad_MusicMath is a reascript to get ms from bpm in a Reaperproject.
--
--   When script window is opened, it takes the current bpm from Reaper and by choosing note buttons it convert bpm to ms. By clicking the resulting ms-text the script is copying the ms to the systems clipboard (for pasting in to delay f.ex)
--
--   Any comments on coding, requests, bugs etc is welcome! PM me (tompad) on Reaper Forum (https://forum.cockos.com/member.php?u=19103).


-- Script generated by Lokasenna's GUI Builder


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
  reaper.MB("Couldn't load the Lokasenna_GUI library. Please run 'Set Lokasenna_GUI v2 library path.lua' in the Lokasenna_GUI folder.", "Whoops!", 0)
  return
end
loadfile(lib_path .. "Core.lua")()

GUI.req("Classes/Class - Label.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Button.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end

GUI.name = "MusicMath"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 210, 450
GUI.anchor, GUI.corner = "mouse", "C"

GUI.New("bpm_label", "Label", {
  z = 1,
  x = 70,
  y = 12,
  caption = "",
  font = 1,
  color = "txt",
  bg = "wnd_bg",
  shadow = false
})


-- <hide-code desc='1/1'>

GUI.New("btn_1_1", "Button", {
  z = 11,
  x = 26.0,
  y = 56.0,
  w = 48,
  h = 48,
  caption = "1/1",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_1dot", "Button", {
  z = 11,
  x = 80.0,
  y = 56.0,
  w = 48,
  h = 48,
  caption = "1/1.",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_1t", "Button", {
  z = 11,
  x = 134.0,
  y = 56.0,
  w = 48,
  h = 48,
  caption = "1/1t",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

-- </hide-code>

-- <hide-code desc='1/2'>

GUI.New("btn_1_2", "Button", {
  z = 11,
  x = 26.0,
  y = 110.0,
  w = 48,
  h = 48,
  caption = "1/2",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_2dot", "Button", {
  z = 11,
  x = 80.0,
  y = 110.0,
  w = 48,
  h = 48,
  caption = "1/2.",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_2t", "Button", {
  z = 11,
  x = 134.0,
  y = 110.0,
  w = 48,
  h = 48,
  caption = "1/2t",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})
-- </hide-code>

-- <hide-code desc='1/4'>

GUI.New("btn_1_4", "Button", {
  z = 11,
  x = 26.0,
  y = 164.0,
  w = 48,
  h = 48,
  caption = "1/4",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_4dot", "Button", {
  z = 11,
  x = 80.0,
  y = 164.0,
  w = 48,
  h = 48,
  caption = "1/4.",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_4t", "Button", {
  z = 11,
  x = 134.0,
  y = 164.0,
  w = 48,
  h = 48,
  caption = "1/4t",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

-- </hide-code>

-- <hide-code desc='1/8'>

GUI.New("btn_1_8", "Button", {
  z = 11,
  x = 26.0,
  y = 218.0,
  w = 48,
  h = 48,
  caption = "1/8",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_8dot", "Button", {
  z = 11,
  x = 80.0,
  y = 218.0,
  w = 48,
  h = 48,
  caption = "1/8.",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_8t", "Button", {
  z = 11,
  x = 134.0,
  y = 218.0,
  w = 48,
  h = 48,
  caption = "1/8t",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

-- </hide-code>

-- <hide-code desc='1/16'>
GUI.New("btn_1_16", "Button", {
  z = 11,
  x = 26.0,
  y = 272.0,
  w = 48,
  h = 48,
  caption = "1/16",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_16dot", "Button", {
  z = 11,
  x = 80.0,
  y = 272.0,
  w = 48,
  h = 48,
  caption = "1/16.",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_16t", "Button", {
  z = 11,
  x = 134.0,
  y = 272.0,
  w = 48,
  h = 48,
  caption = "1/16t",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

-- </hide-code>

-- <hide-code desc='1/32'>

GUI.New("btn_1_32", "Button", {
  z = 11,
  x = 26.0,
  y = 326.0,
  w = 48,
  h = 48,
  caption = "1/32",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_32dot", "Button", {
  z = 11,
  x = 80.0,
  y = 326.0,
  w = 48,
  h = 48,
  caption = "1/32.",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})

GUI.New("btn_1_32t", "Button", {
  z = 11,
  x = 134.0,
  y = 326.0,
  w = 48,
  h = 48,
  caption = "1/32t",
  font = 2,
  col_txt = "txt",
  col_fill = "elm_frame"
})
-- </hide-code>

GUI.New("ms_label", "Label", {
  z = 1,
  x = 105,
  y = 390,
  caption = "0 ms",
  font = 1,
  color = "txt",
  bg = "wnd_bg",
  shadow = false
})

function check_Tempo ()
  local tempo = reaper.Master_GetTempo()
  local tempo_str = tempo .." bpm"
  GUI.Val("bpm_label", tempo_str)
  --Centrerar bpm_label och ms_label mittpunkt
  local x = (GUI.w / 2)
  GUI.elms.bpm_label.x = x - ((gfx.measurestr(tempo_str)) / 2)
  GUI.elms.ms_label.x = x - ((gfx.measurestr(GUI.elms.ms_label.caption)) / 2)
  return tempo
end

function GUI.elms.ms_label:onmouseup()
  GUI.Label.onmouseup(self)
  local str = string.gsub(GUI.elms.ms_label.caption, " ms", "")
  reaper.CF_SetClipboard(str)
end

-- <hide-code desc='btn_1_1'>

function GUI.elms.btn_1_1dot:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 1)
end

function GUI.elms.btn_1_1:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 2)
end

function GUI.elms.btn_1_1t:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 3)
end
-- </hide-code>

-- <hide-code desc='1/2'>

function GUI.elms.btn_1_2dot:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 4)
end

function GUI.elms.btn_1_2:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 5)
end

function GUI.elms.btn_1_2t:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 6)
end
-- </hide-code>

-- <hide-code desc='1/4'>

function GUI.elms.btn_1_4dot:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 7)
end

function GUI.elms.btn_1_4:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 8)
end

function GUI.elms.btn_1_4t:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 9)
end
-- </hide-code>

-- <hide-code desc='1/8'>

function GUI.elms.btn_1_8dot:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 10)
end

function GUI.elms.btn_1_8:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 11)
end

function GUI.elms.btn_1_8t:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 12)
end
-- </hide-code>

-- <hide-code desc='1/16'>

function GUI.elms.btn_1_16dot:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 13)
end

function GUI.elms.btn_1_16:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 14)
end

function GUI.elms.btn_1_16t:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 15)
end
-- </hide-code>

-- <hide-code desc='1/32'>

function GUI.elms.btn_1_32dot:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 16)
end

function GUI.elms.btn_1_32:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 17)
end

function GUI.elms.btn_1_32t:onmouseup()
  GUI.Button.onmouseup(self)
  local tempo = check_Tempo()
  check_ms(tempo, 18)
end
-- </hide-code>

function check_ms (bpm, notvarde)
  local mSeconds = 60000 / bpm

  if notvarde == 1 then
    value_ms = mSeconds * 6 --1/1.
  elseif notvarde == 2 then
    value_ms = mSeconds * 4 -- 1/1
  elseif notvarde == 3 then
    value_ms = mSeconds * 2.666 -- 1/1T
  elseif notvarde == 4 then
    value_ms = mSeconds * 3 -- 1/2.
  elseif notvarde == 5 then
    value_ms = mSeconds * 2 -- 1/2
  elseif notvarde == 6 then
    value_ms = mSeconds * 1.333 -- 1/2T
  elseif notvarde == 7 then
    value_ms = mSeconds * 1.5 -- 1/4.
  elseif notvarde == 8 then
    value_ms = mSeconds * 1 -- 1/4
  elseif notvarde == 9 then
    value_ms = mSeconds * 0.666 -- 1/4T
  elseif notvarde == 10 then
    value_ms = mSeconds * 0.75 -- 1/8.
  elseif notvarde == 11 then
    value_ms = mSeconds * 0.5 -- 1/8
  elseif notvarde == 12 then
    value_ms = mSeconds * 0.333 -- 1/8T
  elseif notvarde == 13 then
    value_ms = mSeconds * 0.375 --1/16.
  elseif notvarde == 14 then
    value_ms = mSeconds * 0.25 --1/16
  elseif notvarde == 15 then
    value_ms = mSeconds * 0.1665 --1/16T
  elseif notvarde == 16 then
    value_ms = mSeconds * 0.1875 --1/32.
  elseif notvarde == 17 then
    value_ms = mSeconds * 0.125 -- 1/32
  elseif notvarde == 18 then
    value_ms = mSeconds * 0.08325 -- 1/32T
  end

  local ms_str = round(value_ms, 4) .." ms"
  GUI.Val("ms_label", ms_str)
  --Centrerar bpm_label och ms_label mittpunkt
  local x = (GUI.w / 2)
  GUI.elms.ms_label.x = x - ((gfx.measurestr(ms_str)) / 2)

end

function round(number, decimals)
  local power = 10^decimals
  return math.floor(number * power) / power
end

GUI.Init()
GUI.func = check_Tempo
GUI.freq = 0
GUI.Main()